// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
  id   String @id @default(cuid())
  name String
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  invoice       Invoice[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Invoice {
  id               String        @id @default(cuid())
  userId           String
  clientName       String
  status           String
  amountDue        Float
  paymentDue       DateTime
  invoiceDate      DateTime
  description      String
  streetName       String
  city             String
  postCode         String
  country          String
  clientStreetName String
  clientCity       String
  clientPostCode   String
  clientCountry    String
  clientEmail      String
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoiceItem      InvoiceItem[]
}

model InvoiceItem {
  id        String  @id @default(cuid())
  invoiceId String
  itemName  String
  quantity  Int?
  price     Float?
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}
